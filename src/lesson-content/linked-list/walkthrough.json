{
  "paragraphs": [
    "Welcome to destructure.io! In these paragraphs we will be detailing everything you need to know to easily learn and understand data structures."
  ],
  "codeChunks": [
    {
      "type": "skipped",
      "code": {
        "java": [
          {
            "given": "class LinkedListExample {"
          }
        ]
      }
    },
    {
      "type": "hidden",
      "code": {
        "java": [
          {
            "given": "  class Node {"
          },
          {
            "given": "    int data;"
          },
          {
            "given": "    Node next;",
            "tooltip": "Reference to the next node in the list. If this is the tail node, next will be set to null."
          },
          {
            "given": ""
          },
          {
            "given": "    public Node(int data) {"
          },
          {
            "given": "      this.data = data;"
          },
          {
            "given": "      this.next = null;"
          },
          {
            "given": "    }"
          },
          {
            "given": "  }"
          },
          {
            "given": ""
          }
        ]
      }
    },
    {
      "type": "hidden",
      "code": {
        "java": [
          {
            "given": "  public static void main(string[] args) {"
          },
          {
            "given": "    Node head = createListSizeN(4);"
          },
          {
            "given": "  }"
          },
          {
            "given": ""
          }
        ]
      }
    },
    {
      "type": "auto",
      "code": {
        "java": [{
          "given": "  public Node createListSizeN(int size) {",
          "animations": [
              "createVarTable,size,4"
          ]
        },{
          "given": "    Node head = new Node(0);",
          "animations": [
            "createNewNode,0,#node1",
            "createNewPointer,#head-pointer,head"
          ]
        },
        {
          "given": "    Node curr = head;",
          "tooltip": "Note we must use a curr pointer instead of moving the head pointer itself. If we moved head we would lose access to the earlier elements in the list, because nothing would point to them anymore (more on this in later modules).",
          "animations": [
            "createNewPointer,#curr-pointer,curr"
          ]
        }
      ]
      }
    },
    {
      "type": "loop",
      "loopCounter": [3],
      "code": {
        "java": [{
          "given": "    for (int i = 1; i < size; i++) {",
          "animations": [
            [
              "addVarTableRow,i,1"
            ], [], []
          ]
        },
        {
          "given": "      curr.next = new Node(i);",
          "animations": [
            [
              "createNewNode,1,#node2",
              "insertNodeAtIndex,tail"
            ],
            [
              "createNewNode,2,#node3",
              "insertNodeAtIndex,tail"
            ],
            [
              "createNewNode,3,#node4",
              "insertNodeAtIndex,tail"
            ]
          ]
        },
        {
          "given": "      curr = curr.next;",
          "animations": [
            "movePointer,#curr-pointer,1"
          ]
        },
        {
          "given": "    }",
          "animations": [
            [
              "setRowData,i,2"
            ],
            [
              "setRowData,i,3"
            ],
            [
              "setRowData,i,4"
            ]
          ]
        }
      ]
    }
  },
  {
    "type": "auto",
    "code": {
      "java": [{
        "given": "    return head;"
      }]
    }
  },
  {
    "type": "auto",
    "code": {
      "java": [{
        "given": "  }"
      }]
    }
  },
  {
    "type": "auto",
    "code": {
      "java": [{
        "given": "}"
      }]
    }
  }
  ]
}
