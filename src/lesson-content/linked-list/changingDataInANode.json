{
  "paragraphs": [
    "A common operation in linked lists, as with arrays, is to update data within the list. For example, if we were holding a queue of orders to prepare at a restaurant in a linked list, we might need to update a node if a customer changes their order.",
    "Updating values in a node is actually very straightforward. With our implementation of the $code(Node) class, you can simply reassign the data field within the desired node by writing $code(node.data = newData). For example, to change the $code(head) data to 5, you can write $code(head.data = 5).",
    "In the $code(setHeadToZero) function below, we simply reassign the data value of the passed in head node to 0. One thing to note here is that we are not creating any new nodes. We simply update the $(data) field of the existing node."
  ],
  "preStartAnimations": [
    "createNewNode,0,#node1",
    "createNewPointer,#head-pointer,head"
  ],
  "codeChunks": [
    {
      "type": "skipped",
      "code": {
        "java": [
          {
            "given": "class LinkedListExample {"
          }
        ]
      }
    },
    {
      "type": "hidden",
      "code": {
        "java": [
          {
            "given": "  class Node {"
          },
          {
            "given": "    int data;"
          },
          {
            "given": "    Node next;",
            "tooltip": "Reference to the next node in the list. If this is the tail node, next will be set to null."
          },
          {
            "given": ""
          },
          {
            "given": "    public Node(int data) {"
          },
          {
            "given": "      this.data = data;"
          },
          {
            "given": "      this.next = null;"
          },
          {
            "given": "    }"
          },
          {
            "given": "  }"
          },
          {
            "given": ""
          }
        ]
      }
    },
    {
      "type": "hidden",
      "code": {
        "java": [
          {
            "given": "  public static void main(string[] args) {"
          },
          {
            "given": "    Node head = new Node(0);"
          },
          {
            "given": "    changeHeadData(head, 10);"
          },
          {
            "given": "  }"
          }
        ]
      }
    },
    {
      "type": "skipped",
      "code": {
        "java": [{
          "given": ""
        }]
      }
    },
    {
      "type": "auto",
      "code": {
        "java": [{
          "given": "  public void changeHeadData(Node head, int newData) {",
          "animations": [

          ]
        },
        {
          "given": "    head.data = newData;",
          "tooltip": "Note: We don't need to return the head Node here, because objects are passed by reference. This means any changes we make to our linked list in the function affect the list for its caller as well.",
          "animations": [
            "setNodeData,#node1,10"
          ]
        },
        {
          "given": "  }"
        },
        {
          "given": "}"
        }
      ]
      }
    }
  ]
}
