{
  "modules": [
    {
      "name": "Linked List",
      "descriptionParagraphs": [
        "Linked lists are a very commonly used data structure for representing ordered data. Each piece of data is held inside its own object, called a node, and these nodes are strung together into a list. Each node is “linked” to the next node in the list with a reference, thus making a “linked list”. This creates a chain-like structure where instead of having access to the index of each item (at array[2] for example), each node is only referenced by the previous node in the list."
      ],
      "whatYouWillLearnParagraphs": [
        "In this module you will learn about the fundamental unit of a Linked List (a node) and how these units can be chained together to create a list. From there you will learn how to manipulate these lists to your advantage in your code, and why someone would want to use this sequential data structure over an indexed data structure like an array."
      ],
      "realWorldApplicationsParagraphs": [
        "Linked lists could be used to create a simple playlist of music by stringing together songs as nodes. The start of the playlist would be the head node, and each node would contain the song you wanted to add. As each new song is added, a new node is appended to the end of the list, and after you create the entire playlist you could listen to all of the songs by playing each one and then moving onto the next node when the current song is done."
      ],
      "directory": "linked-list",
      "submodules": [
        {
          "name": "Walkthrough",
          "filename": "walkthrough.json"
        },
        {
          "name": "What is a Linked List?",
          "filename": "whatIsALinkedList.json"
        },
        {
          "name": "Creating a Linked List",
          "filename": "creatingALinkedList.json"
        },
        {
          "name": "Changing Data in a Node",
          "filename": "changingDataInANode.json"
        },
        {
          "name": "Adding Another Element",
          "filename": "addingAnotherElement.json"
        },
        {
          "name": "Adding “N” Elements",
          "filename": "addNElementsToList.json"
        },
        {
          "name": "Iterating Through A List",
          "filename": "iteratingThroughAList.json"
        },
        {
          "name": "Changing Data At Position \"N\"",
          "filename": "changingDataAtPositionN.json"
        }
      ]
    },
    {
      "name": "Arrays",
      "descriptionParagraphs": [
        "Arrays are collections of items stored at contiguous memory locations. Generally, the idea is to store items of the same type together in order to easily access several items while storing only a single memory location (that of the first item in the array)."
      ],
      "whatYouWillLearnParagraphs": [
        "In this module, you will see how multiple items can be stored in contiguous memory locations and, subsequently, how to access and manipulate those memory locations to help solve problems."
      ],
      "realWorldApplicationsParagraphs": [
        "Arrays are extremely versatile and can be used for storing almost any collection of items; a good example would be the contact list on your phone. Your phone could store all of your contacts in an array, and the array could be sorted based on first or last name to make it easier to view. The elements in this array can be moved around by changing their index, and any element can be removed or changed by altering whatever value is at a certain index."
      ],
      "directory": "arrays"
    },
    {
      "name": "Stacks",
      "descriptionParagraphs": [
        "The term “stack” can be used to describe any linear data structure that resembles a physical deck of cards. Stacks are commonly described as being Last In First Out (LIFO), where items are added to the data structure on top of the existing items in the stack and removed from the top of the stack."
      ],
      "whatYouWillLearnParagraphs": [
        "In this module, you will see how a stack can be created using object-oriented programming and other helpful data structures. Once created, you will learn about the fundamental functions of a stack, “push” (adding an element to the stack) and “pop” (removing an element from the stack)."
      ],
      "realWorldApplicationsParagraphs": [
        "Stacks can be used to represent any objects that are stacked on top of each other, like a deck of cards, but they can also represent certain patterns in computing. One good example of this is a web browser’s back-forward button: as you navigate to different webpages your browser will stack up all the previous pages for you, so that each time you click the back button you take one link off the stack and go back to the last page you visited."
      ],
      "directory": "stacks"
    },
    {
      "name": "Queues",
      "descriptionParagraphs": [
        "A queue is another linear data structure that has a specific order in which operations are performed. Queues are described as being First In First Out (FIFO) which means that the first item added to the queue would also be the first item removed from the queue."
      ],
      "whatYouWillLearnParagraphs": [
        "In this module, you will see how a queue can be created using object-oriented programming and other helpful data structures. Once created, you will learn about the fundamental functions of a queue, “enqueue” (adding an element to the queue) and “dequeue” (removing an element from the queue)."
      ],
      "realWorldApplicationsParagraphs": [
        "One common application of queues is when an application is trying to limit the amount of people accessing it at one time so it makes the users form a “line” or queue to wait to access it. If a user tries to log onto a website while the website is under stress, they will be put in a queue behind all the people that logged in before them, and as the website is able to handle more traffic the users will move up in the line until they are finally taken out of the queue and allowed to access the website."
      ],
      "directory": "queues"
    },
    {
      "name": "Maps",
      "descriptionParagraphs": [
        "Maps are abstract data structures that are collections of pairs of corresponding keys and values. This structure maps each item, known as a key, to a value in the map, allowing the user to look up any value as long as they have the corresponding key."
      ],
      "whatYouWillLearnParagraphs": [
        "In this module, you will learn how to create and manipulate a map data structure. This includes populating the collection by inserting pairs, managing the collection by deleting pairs, accessing the values stored in the map, and replacing the values associated with a key in the map."
      ],
      "realWorldApplicationsParagraphs": [
        "Maps can be used to associate more than just an index to a value, as can be shown in a gradebook for a school. If you wanted to find out the GPA of a particular student stored in your system, you could create a map that mapped each student’s name to their GPA. To find any student’s GPA quickly, you simply search for that student’s name in the keys of the map and the corresponding value would be their GPA. "
      ],
      "directory": "maps"
    },
    {
      "name": "Trees",
      "descriptionParagraphs": [
        "A tree is a non-linear linked data structure that consists of connected nodes. Instead of the linear structure, trees order data hierarchically. This means that the nodes in the tree can be represented similarly to a family tree, with each node connected to parent nodes and/or child nodes."
      ],
      "whatYouWillLearnParagraphs": [
        "In this module, you will learn how a tree data structure is formed starting with the first node, or root node. You will learn how the nodes in a tree can contain data as well as references to one or more child nodes and how the relationship between these nodes, called edges, can be managed and traversed. You’ll also see how trees can be a useful data structure when performing searches and in other algorithm cases."
      ],
      "realWorldApplicationsParagraphs": [
        "Trees have been very famously used to implement file structures on most computer’s operating systems. To traverse through the files in your computer, you click through different folders which take you down the levels of the file “tree” until you get to the files you want, which are the nodes. These file structures operate in a top-down fashion, where the root folder is the absolute top of the tree and a file with no folders beneath it is at the root of the tree."
      ],
      "directory": "trees"
    },
    {
      "name": "Graphs",
      "descriptionParagraphs": [
        "A graph is a non-linear data structure that consists of a set of nodes (or vertices) and a set of edges that connects those nodes. As opposed to linear data structures, in a graph, a single node can be connected to any number of other nodes, and the edges that connect them can be either directed or undirected."
      ],
      "whatYouWillLearnParagraphs": [
        "In this module, you will learn how to represent a graph using data structures you are already familiar with as well as an object-oriented approach to representing nodes and edges. We will also learn how to perform the useful operations associated with graphs such as sorting, traversing, and searching."
      ],
      "realWorldApplicationsParagraphs": [
        "Graphs can be used to solve many real-world problems. Picture an airline booking system that allows customers to book several connected flights between different airports. A good way for this platform to organize the data would be to represent different airports as nodes and the flights connecting these airports as edges."
      ],
      "directory": "graphs"
    }
  ]
}
